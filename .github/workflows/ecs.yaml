name: Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: action-ci-cd
  ECS_CLUSTER: MyCluster
  ECS_SERVICE: MyService
  CONTAINER_PORT: 80

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up NodeJS
      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18 # Updated to supported version

      # Install NodeJS Dependencies
      - name: Install NodeJS dependencies
        run: npm install

      # SonarQube Analysis
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          #SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Build Docker Image
      - name: Build Docker image
        run: docker build -t app:${{ github.sha }} .

      # Trivy Scan
      - name: Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'app:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      # Get AWS account ID
      - name: Get AWS account ID
        id: get-aws-account
        run: |
          echo "aws_account_id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      # Login to Amazon ECR   
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Create the ECR Repository (If Not Exists)
      - name: Create ECR Repository
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository --repository-name ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      # Tag and Push Image into ECR
      - name: Tag and Push Image into ECR
        run: |
          docker tag app:${{ github.sha }} ${{ steps.get-aws-account.outputs.aws_account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker tag app:${{ github.sha }} ${{ steps.get-aws-account.outputs.aws_account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          docker push ${{ steps.get-aws-account.outputs.aws_account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          docker push ${{ steps.get-aws-account.outputs.aws_account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest
          
      # Push the image to Docker Hub Repository
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push to Docker Hub
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/action-cicd:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/action-cicd:latest

      # Create task definition file with proper account ID
      - name: Prepare task definition
        run: |
          # Replace placeholder with actual AWS account ID
          cat > task-definition.json << EOF
          {
              "requiresCompatibilities": [
                  "FARGATE"
              ],
              "family": "sample-fargate",
              "containerDefinitions": [
                  {
                      "name": "sample-fargate",
                      "image": "${{ steps.get-aws-account.outputs.aws_account_id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ github.sha }}",
                      "portMappings": [
                          {
                              "name": "sample-fargate",
                              "containerPort": ${{ env.CONTAINER_PORT }},
                              "hostPort": ${{ env.CONTAINER_PORT }},
                              "protocol": "tcp",
                              "appProtocol": "http"
                          }
                      ],
                      "essential": true
                  }
              ],
              "volumes": [],
              "networkMode": "awsvpc",
              "memory": "3 GB",
              "cpu": "1 vCPU",
              "executionRoleArn": "arn:aws:iam::${{ steps.get-aws-account.outputs.aws_account_id }}:role/ecsTaskExecutionRole"
          }
          EOF

      # Register the task definition
      - name: Register Task Definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      # Create or update ECS cluster and service
      - name: Create or update ECS cluster and service
        id: deploy-service
        run: |
          # Check if cluster exists
          CLUSTER_EXISTS=$(aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --query "clusters[?status=='ACTIVE'].clusterName" --output text || echo "")
          
          if [ -z "$CLUSTER_EXISTS" ]; then
            echo "Creating ECS cluster '${{ env.ECS_CLUSTER }}'..."
            aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }}
            echo "Waiting for ECS cluster to become active..."
            sleep 30
          else
            echo "ECS cluster '${{ env.ECS_CLUSTER }}' already exists and is active."
          fi
          
          # Check if service exists
          SERVICE_EXISTS=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query "services[?status=='ACTIVE'].serviceName" --output text || echo "")
          
          if [ -z "$SERVICE_EXISTS" ]; then
            echo "Creating ECS service '${{ env.ECS_SERVICE }}'..."
            aws ecs create-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service-name ${{ env.ECS_SERVICE }} \
              --task-definition $TASK_DEF_ARN \
              --desired-count 1 \
              --launch-type FARGATE \
              --platform-version LATEST \
              --network-configuration "awsvpcConfiguration={subnets=[${{ secrets.AWS_SUBNET_ID }}],securityGroups=[${{ secrets.AWS_SECURITY_GROUP_ID }}],assignPublicIp=ENABLED}"
          else
            echo "Updating ECS service '${{ env.ECS_SERVICE }}'..."
            aws ecs update-service \
              --cluster ${{ env.ECS_CLUSTER }} \
              --service ${{ env.ECS_SERVICE }} \
              --task-definition $TASK_DEF_ARN \
              --force-new-deployment
          fi

      # Wait for service to stabilize
      - name: Wait for service to stabilize
        run: |
          echo "Waiting for service to stabilize..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}

      # Get the public IP of the running task
      - name: Get public IP of ECS task
        id: get-public-ip
        run: |
          # Give some time for task to be running
          echo "Waiting for task to be running..."
          sleep 30
          
          # Get the ARN of the running task
          TASK_ARN=$(aws ecs list-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service-name ${{ env.ECS_SERVICE }} \
            --query 'taskArns[0]' \
            --output text)
          
          if [ -z "$TASK_ARN" ] || [ "$TASK_ARN" == "None" ]; then
            echo "No running tasks found for service ${{ env.ECS_SERVICE }}"
            exit 1
          fi
          
          echo "Found task: $TASK_ARN"
          
          # Get network interface details
          ENI_ID=$(aws ecs describe-tasks \
            --cluster ${{ env.ECS_CLUSTER }} \
            --tasks $TASK_ARN \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
            --output text)
          
          echo "Network interface ID: $ENI_ID"
          
          # Get public IP
          PUBLIC_IP=$(aws ec2 describe-network-interfaces \
            --network-interface-ids $ENI_ID \
            --query 'NetworkInterfaces[0].Association.PublicIp' \
            --output text)
          
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV
          echo "public_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT

      # Output application URL
      - name: Output Application URL
        run: |
          echo "::notice title=Application URL::http://${{ env.PUBLIC_IP }}:${{ env.CONTAINER_PORT }}"
          echo "ðŸš€ Application deployed successfully!"
          echo "ðŸ“± You can access your application at: http://${{ env.PUBLIC_IP }}:${{ env.CONTAINER_PORT }}"

    # Create Kubeconfig
      - name: Create  Kubeconfig
        run: |
           kubectl apply -f k8s-manifests/eks-cluster.yaml


    # Update Kubeconfig
      - name: Update Kubeconfig
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name actions-eks-cluster

    # Install kubectl
      - name: Install Kubectl
        run: |
           curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.32.0/2024-12-20/bin/linux/amd64/kubectl
           chmod +x ./kubectl
           sudo mv ./kubectl /usr/local/bin/kubectl

    # Deploy to Amazon EKS
      - name: Deploy to EKS
        run: |
         kubectl apply -f k8s-manifests/deployment.yaml
         kubectl apply -f k8s-manifests/service.yaml

         